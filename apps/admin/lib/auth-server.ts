import { betterAuth, BetterAuthOptions } from "better-auth"
import { openAPI, customSession } from "better-auth/plugins"

/**
 * Instance Better-auth c√¥t√© serveur pour le middleware Next.js
 *
 * Cette configuration doit √™tre identique √† celle du backend AdonisJS
 * pour pouvoir lire les m√™mes sessions/cookies
 */
const options = {
  baseURL: process.env.NEXT_PUBLIC_API_URL || "http://localhost:3333",
  trustedOrigins: [
    'http://localhost:3000',  // Frontend Next.js
    'http://localhost:3333',  // Backend Adonis
    'http://localhost:5173',  // Autre origine si n√©cessaire
  ],
  // Utiliser la m√™me base de donn√©es que le backend pour lire les sessions
  database: {
    provider: 'pg',
    url: process.env.DATABASE_URL || 'postgresql://postgres:password@localhost:5432/ona_ui',
  },
  advanced: {
    cookiePrefix: "ona-ui",
    database: {
      generateId: false,
    },
  },
  emailAndPassword: {
    enabled: true,
  },
  // üîß M√™me configuration utilisateur que le backend
  user: {
    additionalFields: {
      role: {
        type: "string",
        required: false,
        defaultValue: "user",
        input: false,
      },
    },
  },
  plugins: [
    openAPI(),
  ]
} satisfies BetterAuthOptions;

export const auth = betterAuth({
  ...options,
  plugins: [
    ...(options.plugins ?? []),
    // üîß M√™me configuration de session personnalis√©e que le backend
    customSession(async ({ user, session }, ctx) => {
      return {
        user: {
          ...user,
          role: user.role || "user",
        },
        session: {
          ...session,
        }
      };
    }, options),
  ]
});

/**
 * Utilitaires d'authentification c√¥t√© serveur
 */
export const serverAuthUtils = {
  /**
   * V√©rifie si l'utilisateur peut acc√©der √† l'admin dashboard
   * Maintenant utilise correctement le champ role personnalis√©
   */
  canAccessAdminDashboard(user: any): boolean {
    if (!user) return false
    
    console.log("üîç [SERVER AUTH UTILS] V√©rification acc√®s pour user:", {
      id: user.id,
      email: user.email,
      role: user.role
    })
    
    // Logique bas√©e sur le r√¥le personnalis√©
    const hasValidRole = (
      user.role === "admin" ||
      user.role === "super_admin"
    )
    
    // Logique temporaire bas√©e sur l'email en fallback
    const hasAdminEmail = user.email?.includes("admin")
    
    const canAccess = hasValidRole || hasAdminEmail
    
    console.log("üîç [SERVER AUTH UTILS] R√©sultat v√©rification:", {
      hasValidRole,
      hasAdminEmail,
      canAccess
    })
    
    return canAccess
  }
}